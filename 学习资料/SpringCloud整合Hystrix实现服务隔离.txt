Hystrix 实现服务隔离
服务降级、限流、熔断

Rpc远程调用中如何防止服务雪崩效应?
面试官会问：在微服务中如何保护服务?
	使用Hystrix去保护服务。
Hystrix 是一个在微服务中关于服务保护框架。在分布式中能够实现对服务的容错。

能够减少服务与服务的依赖关系（不是指服务业务上的依赖），雪崩效应是指：一个服务如果因高并发原因无法访问，不能影响到其他的服务。最终以服务降级、熔断、限流。

服务雪崩效应:当一个服务突然收到高并发请求，tomcat服务器如果承受不了的情况下，会产生服务的堆积，可能会导致服务不可用。
容错：服务在发生不可用的时候出错处理的方案，预备方案。


1.Hystrix产生背景：

微服务高并发场景：

作用：
服务保护，当服务产生堆积的时候
1.服务隔离
	保证服务与服务之间互不影响。
	为什么会产生服务的雪崩效应?
	服务雪崩效应产生原因是如果某一服务在高并发情况下，会产生服务堆积在同一个线程池中，所有请求全部到同一个服务中进行访问，这时候会导致其他服务没有线程接收请求访问，所以会产生服务产生雪崩效应。
服务隔离就是每个服务接口互不影响，服务隔离有两种实现方式。
	1.线程池方式：每个相同服务接口都有自己独立的线程池，管理运行当前自己的接口。
		缺点：对服务器CPU、内存开销非常大。但是可以实现完全隔离。能应用于高并发，解决雪崩效应的问题。
	2.计数器（信号量）方式：底层使用原子计数器，针对每个服务都设置自己独立限制阈值，比如设置每个服务接口最多访问50次，一旦超过缓存队列次数，需要由自己实现拒绝策略。
		缺点:相当于对接口做访问限制，超出部分会直接拒绝。

2.服务降级
	当服务不可用的时候（相当于服务正在进行等待的时候、网络延迟、服务器响应慢），使用fallback方法直接返回一个服务不可用的错误提示给用户，不应该让用户一直等待。而且服务降级时并不会调用服务接口，直接调用fallback方法
	作用：目的是为了提高用户体验（示例：服务器繁忙，请稍后重试），能够防止服务雪崩效应。 

	如果调用其他接口超时时（默认时间是1s），如果在1s内没有及时响应，默认情况下业务逻辑是可以执行的，但是会直接执行服务降级方法。
3.服务熔断
	熔断和保险丝效果一样，为了防止火灾发生，如果电流过大的情况下，保险丝会烧断。最终不能再使用电。最终的目的是防止火灾的发生。
	在微服务中服务熔断产生的原因就是因为服务发生请求过多（高并发），需要设置一个限制，比如最多同时只能接受100个请求访问（100个线程），超出的请求存放在缓存队列中，如果缓存队列已满，则直接拒绝访问服务（服务熔断）。
	服务熔断和服务降级一起使用。
	服务熔断的目的是为了保护服务，如果请求数量达到极限（最大阀值），自动开启保护功能调用服务降级方法，返回一个友好提示
	服务熔断能实现什么效果：防止服务器不会宕机（防止雪崩效应）。
4.服务限流（不属于Hystrix 保护）
	限流：单纯限制某个服务，针对某个客户端限制访问



堆积请求：默认tomcat最大线程数是150。
尝试第151个请求时，请求会产生阻塞（等待线程处理完毕），大量请求会等待，如果堆积的请求过多，可能会造成服务器的瘫痪。需要进行服务保护。
tomcat底层 是 http+线程池，每个线程都是独立的请求。

微服务中rpc远程调用使用什么技术通讯：http（底层是tcp）采用协议是Restful底层是HttpClient实现rpc远程通讯。

如果在微服务中没有处理好雪崩效应，那么可能会导致所有已串联的依赖服务产生等待。***

Hystrix 整合 SpringCloud

@HystrixCommand(fallbackMethod = "orderToMemberUserInfoHystrixFallbackMethod") 注解默认开启线程池隔离模式,和服务降级，服务熔断机制、fallbackMethod作用是指定服务降级执行方法。

@EnableHystrix 开启Hystrix


Eureka：服务注册于发现。

Feign：基于动态代理机制，根据注解和选择的机器，拼接请求 url 地址，发起请求。

Ribbon：实现负载均衡，从一个服务的多台机器中选择一台。

Hystrix：提供线程池，不同的服务走不同的线程池，实现了不同服务调用的隔离，避免了服务雪崩的问题。

Zuul：网关管理，由 Zuul 网关转发请求给对应的服务。