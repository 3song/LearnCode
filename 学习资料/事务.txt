事务： 保证数据的一致性
	事务原理：通过Aop 实现事务 
	通过 AOP 编程实现自动化事务。
事务的四大特性：原子性、隔离性、持久性、一致性
	原子性：要么全部成功、要么全部失败 不可再分
		是指事务是一个不能再分割的工作单元，事务中的操作要么都发生，要么都不发生
	一致性：
		用户转账  A用户--转账--B用户   
		事务在开始之前和事务结束之后，数据库的完整性约束不能被破坏，也就是说数据库事务不能破坏关系数据库的完整性以及逻辑事务上的一致性
	隔离性：事务并发访问时，事务之间是隔离的，一个事务的结果不能影响其他事务的运行效果
		事务的四种隔离级别
			读未提交（Read Uncommitted）
				读未提交，顾名思义，就是可以读到未提交的内容。因此，在这种隔离级别下，查询是不会加锁的，也由于查询的不加锁，所以这种隔离级别的一致性是最差的，可能会产生“脏读”、“不可重复读”、“幻读”。如无特殊情况，基本是不会使用这种隔离级别的。
			读提交（Read Committed）
				读提交，顾名思义，就是只能读到已经提交了的内容。这是各种系统中最常用的一种隔离级别，也是SQL Server和Oracle的默认隔离级别。这种隔离级别能够有效的避免脏读，但除非在查询中显示的加锁，如：
				select * from T where ID=2 lock in share mode;
				select * from T where ID=2 for update;
				不然，普通的查询是不会加锁的。
				那为什么“读提交”同“读未提交”一样，都没有查询加锁，但是却能够避免脏读呢？这就要说道另一个机制“快照（snapshot）”，而这种既能保证一致性又不加锁的读也被称为“快照读（Snapshot Read）”
				假设没有“快照读”，那么当一个更新的事务没有提交时，另一个对更新数据进行查询的事务会因为无法查询而被阻塞，这种情况下，并发能力就相当的差。而“快照读”就可以完成高并发的查询，不过，“读提交”只能避免“脏读”，并不能避免“不可重复读”和“幻读”。
			可重复读（Repeated Read）
				可重复读，顾名思义，就是专门针对“不可重复读”这种情况而制定的隔离级别，自然，它就可以有效的避免“不可重复读”。而它也是MySql的默认隔离级别。在这个级别下，普通的查询同样是使用的“快照读”，但是，和“读提交”不同的是，当事务启动时，就不允许进行“修改操作（Update）”了，而“不可重复读”恰恰是因为两次读取之间进行了数据的修改，因此，“可重复读”能够有效的避免“不可重复读”，但却避免不了“幻读”，因为幻读是由于“插入或者删除操作（Insert or Delete）”而产生的。
			串行化（Serializable）
				这是数据库最高的隔离级别，这种级别下，事务“串行化顺序执行”，也就是一个一个排队执行。这种级别下，“脏读”、“不可重复读”、“幻读”都可以被避免，但是执行效率奇差，性能开销也最大，所以基本没人会用。
	持久性：事务完成后、该事务对数据库所做的更改就要持久的保存在数据库中，并不会被回滚，(完成的事务是系统永久的部分，对系统（项目）的影响是永久性的，该修改即使出现致命的系统故障也将一直保持)
Spring 事务：*******
	当userDao.add()执行之后报错，数据应该不能保存进数据库。
	Spring事务分类：
		编程式事务（手动式事务）：用户自己Begin和Commit  （需要手写）
			原理：获取该数据源的API 通过数据源的API中自动封装的手动Begin、rollback、Commit的方法 实现编程式事务。
				搭建事务环境：
		声明式事务：
		1.XML 配置 <tx:manager></tx:manager> 使用AOP配置切入点
			声明式事务原理：  Aop 编程 +环绕通知 + 异常通知 ------------------使用AOP配置切入点 使用环绕通知 方法通知之前 begin()和之后进行执行commit() +异常通知 方法rollback() 
			注意点：
				1.使用声明式事务 不要Try catch 因为Try catch 抛出异常后   环绕通知 是可以放行的 应该在方法上使用Throws抛出异常
			异常应该放在控制层捕获
				2.事务一定要释放：commit或者rollback,事务开启如果不释放(提交或回滚)：太多会报异常 
		2.注解方式：@Transactional

什么是事务的传播行为：事务传递
	分为7种：
		1.REQUIRED（默认）：支持使用当前事务，如果当前事务不存在，创建一个新事务。
		2.SUPPORTS：支持使用当前事务，如果当前事务不存在，则不使用事务。
		3.MANDATORY：中文翻译为强制，支持使用当前事务，如果当前事务不存在，则抛出Exception。
		4.REQUIRES_NEW：创建一个新事务，如果当前事务存在，把当前事务挂起。 
		5.NOT_SUPPORTED：无事务执行，如果当前事务存在，把当前事务挂起。
		6.NEVER：无事务执行，如果当前有事务则抛出Exception。
		7.NESTED：嵌套事务，如果当前事务存在，那么在嵌套的事务中执行。如果当前事务不存在，则表现跟REQUIRED一样。
	格式：@Transactional(propagation = Propagation.REQUIRES_NEW)

分布式事务 ：AutoMatic 2pc协议 两段提交协议（小项目） 
				大项目 ：补偿机制，MQ、TCC、重试机制