WebServices体系结构

在Web 服务的体系结构中，涉及到三个角色，
一个是 Web 服务提供者，一个是 Web 服务中介者，还有一个就是 Web 服务请求者，
同时还涉及到三类动作，即发布，查找，绑定，
Web 服务提供者：
可以发布 Web 服务，并且对使用自身服务的请求进行响应，
Web 服务的拥有者，它会等待其他的服务或者是应用程序访问自己。
Web 服务请求者：
也就是 Web 服务功能的使用者，它通过服务注册中心也就是 Web 服务中介者查找到所需要的服务，
再利用 SOAP 消息向 Web 服务提供者发送请求以获得服务。
Web 服务中介者：
也称为服务代理，用来注册已经发布的 Web服务提供者，并对其进行分类，同时提供搜索服务，
简单来说的话，Web 服务中介者的作用就是把一个 Web 服务请求者和合适的 Web 服务提供者联系在一起，
充当一个管理者的角色，一般是通过 UDDI来实现。
发布：
通过发布操作，可以使 Web服务提供者向 Web 服务中介者注册自己的功能以及访问的接口。
发现（查找）：
使得 Web 服务请求者可以通过 Web 服务中介者来查找到特点的种类的 Web 服务。
绑定：
这里就是实现让服务请求者能够使用服务提供者提供的服务了。

WebServices三种基本元素之 SOAP
SOAP 即 Simple Object AccessProtocol 也就是简单对象访问协议。
SOAP 呢，其指导理念是“唯一一个没有发明任何新技术的技术”，
是一种用于访问 Web 服务的协议。
因为 SOAP 基于XML 和 HTTP ，其通过XML 来实现消息描述，然后再通过 HTTP 实现消息传输。
SOAP 是用于在应用程序之间进行通信的一种通信协议。
因为是基于 XML 和HTTP 的，所以其独立于语言，独立于平台，并且因为 XML 的扩展性很好，
所以基于 XML 的 SOAP 自然扩展性也不差。
通过 SOAP 可以非常方便的解决互联网中消息互联互通的需求，
其和其他的 Web 服务协议构建起 SOA 应用的技术基础。
SOAP 协议的一个重要特点是它独立于底层传输机制，Web 服务应用程序可以根据需要选择自己的数据传输协议，
可以在发送消息时来确定相应传输机制。
由于 HTTP 协议本身的一些特点和局限性，
使得当 SOAP 使用HTTP 绑定的 Web 服务并不能满足某些企业应用的需求。
比如，HTTP 不是一个可靠传输协议，所以有可能在传输过程中出现问题，
然后 HTTP 协议基于Request/Response 模型，也就是说客户端需要在等待响应消息接收完成后才能继续执行，
而此时如果响应时间过长呢？
基于上面的这些需求，便需要选择合适的传输协议了。
关于这方面的内容的话，有点深奥了，有兴趣的可以去看看 IBM 的一些关于这方面内容的介绍。
还有一点需要提及一下，那就是 SOAP 是可以绕过防火墙的，将来将会作为 W3C 的标准进行发展。

WebServices三种基本元素之 WSDL
WSDL 即Web Services Description Language也就是 Web 服务描述语言。
是基于 XML的用于描述 Web 服务以及如何访问 Web 服务的语言。
服务提供者通过服务描述将所有用于访问 Web服务的规范传送给服务请求者，
要实现 Web服务体系结构的松散耦合，服务描述是一个关键，
不管是请求者还是服务提供者，通过服务描述便可以不必了解对方的底层平台，编程语言等，
服务描述与底层的 SOAP 基础结构相结合，
足以封装服务请求者的应用程序和服务提供者的 Web服务之间的这个细节。
WSDL 描述了 Web服务的三个基本属性：
（1）服务所提供的操作
（2）如何访问服务
（3）服务位于何处（通过 URL 来确定就 OK 了）

WebServices三种基本元素之 UDDI
UDDI 即 Universal Description，Discovery and Integration，也就是通用的描述，发现以及整合。
WSDL 呢，用来描述了访问特定的 Web 服务的一些相关的信息，可以在互联网上，
或者是在企业的不同部门之间，如何来发现我们所需要的 Web 服务呢？
而 Web 服务提供商又如何将自己开发的 Web 服务公布到因特网上，
这就需要使用到 UDDI 了，UDDI的话，是一个跨产业，跨平台的开放性架构，
可以帮助 Web 服务提供商在互联网上发布 Web 服务的信息。
UDDI 呢是一种目录服务，企业可以通过 UDDI 来注册和搜索 Web 服务。
简单来时候话，UDDI 就是一个目录，只不过在这个目录中存放的是一些关于 Web 服务的信息而已。
并且 UDDI 通过SOAP 进行通讯，构建于 . Net 之上。

开发 Web服务的方式
（1）开发阶段：
 实现一个 Web 服务，使这个 Web 服务能响应和接收 SOAP 消息，
 （这个呢，其实可以通过 Visual Studio 来帮助实现），
 定义好逻辑模块（这个 Web 服务总要干点事情吧），
 然后再撰写 WSDL 文件（这个呢，开发工具会自动生成的，不需要人工撰写了）
 （2）部署阶段：
 指定 Web 服务的传输协议，将 Web 服务注册到相应服务描述部署文件（这些也是可以由工具来自动完成的）
 （3）发布阶段：
 将 Web 服务的接口和调用的地址公开给客户端调用，
 常用的发布方式为基于 Web 提供的WSDL 的链接，当然 UDDI 也是一个选择。
