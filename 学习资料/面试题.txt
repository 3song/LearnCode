面试题：
	创建线程的五种方式：
	继承Threads类 实现run方法
	重写Runnable接口
	匿名类创建
	线程池创建
	重写Callable类   实现cell方法
Object 中有什么方法  wait equal toString

Spring 的事务：
	
事务的传播行为：
	方法中嵌套方法 事务是怎么管理

项目中安全如何架构：
	Web常见攻击手段与防御：
		XSS 使用javascript脚本注入攻击 ：请求时注意替换特殊字符（如><?%&）
		(如何保证接口幂等性)CSRF 模拟请求攻击 防止抓包他人请求：使用图形验证码和短信验证码形式防止机器重复提交请求 ，限制IP访问，nginx 配置限流，搭建黑名单白名单系统
		上传文件漏洞：由于对上传文件格式未做限制，用户上传可执行文件时，容易造成服务器安全问题
			解决方式：对文件上传格式进行限制，并使用文件流判断文件真实格式；
		Sql注入漏洞，使用Sql拼接方式查询数据库时，用户输入其他信息，使sql成立（如 or 1=1）： 使用?方式传参，或mybatis使用#传递参数 不使用$
Zookeeper 面试题

	Zookeeper服务健康检查使用了Zab协议
		ZAB（ZooKeeper Atomic Broadcast 原子广播）协议是为分布式协调服务 ZooKeeper 专门设计的一种支持崩溃恢复的原子广播协议。在 ZooKeeper 中，主要依赖 ZAB协议来实现分布式数据一致性，基于该协议，ZooKeeper 实现了一种主备模式的系统架构来保持集群中各个副本之间的数据一致性。ZAB 协议包括两种基本的模式，分别是崩溃恢复和消息广播。
			崩溃恢复：当集群中的一台Zookeeper服务器宕机后，会通过选举产生新的 Leader 服务器。当选举产生了新的 Leader 服务器，同时集群中已经有过半的机器与该 Leader 服务器完成了状态同步（数据同步）之后，ZAB 协议就会退出恢复模式。
			消息广播：当一台同样遵守 ZAB 协议的服务器启动后加入到集群中时，如果此时集群中已经存在一个 Leader 服务器在负责进行消息广播。那么新加入的服务器就会自觉地进人数据恢复模式：找到 Leader 所在的服务器，并与其进行数据同步，然后一起参与到消息广播流程中去。
Zookeeper 实现分布式锁原理：
	Zookeeper 实现分布式锁原理：
		分布式锁，这个主要得益于 ZooKeeper 为我们保证了数据的强一致性。锁服务可以分为两类，一个是 保持独占，另一个是 控制时序。
		1. 所谓保持独占，就是所有试图来获取这个锁的客户端，最终只有一个可以成功获得这把锁。通常的做法是把 zk 上的一个 znode 看作是一把锁，通过 create znode 的方式来实现。所有客户端都去创建 /distribute_lock 节点，最终成功创建的那个客户端也即拥有了这把锁。

		2. 控制时序，就是所有视图来获取这个锁的客户端，最终都是会被安排执行，只是有个全局时序了。做法和上面基本类似，只是这里 /distributelock 已经预先存在，客户端在它下面创建临时有序节点（这个可以通过节点的属性控制：CreateMode.EPHEMERALSEQUENTIAL 来指定）。Zk 的父节点（/distribute_lock）维持一份 sequence, 保证子节点创建的时序性，从而也形成了每个客户端的全局时序。
Redis 五种数据类型
	String key value
	List 
	Set
	ZSet
	hash ----记住不是hashmap
Redis 实现分布式锁 使用setnx()
	SETNX key value
		将 key 的值设为 value ，当且仅当 key 不存在。若给定的 key 已经存在，则 SETNX 不做任何动作。
		设置值成功，返回 1 。设置值失败，返回 0 。
	使用setnx()创建相同的Key值，由于rediskey 的唯一性，如果返回1，说明获取到锁，如果值为0则线程，应该等待
	set和setnx 的区别：
		1.返回值不同 set 返回OK setnx返回 1或0
		2.如果key 存在  set方法会覆盖value  setnx 会返回0 并且不做任何操作。
如何解决跨域问题：
	1.设置响应头的属性值
	2.后台Http转发
	3.jsonp
	4.设立Nginx 或Zuul网关 通过反向代理指定对应的服务器
SpringCloud五大组件
	注册中心：eureka zookeeper consul redis 管理分布式系统中所有的服务
	服务熔断: hysixties 实现高并发情况下服务的降级，隔离，熔断
	Feign客户端 ：用来更方便的调用 接口  没有这个
	分布式配置中心： 动态修改分布式项目配置文件
	Zuul 网关：控制分布式的所有请求转发
	Ribbon  本地负载均衡 集群情况下实现轮询等其他调用服务、
过滤器和拦截器的区别
（1）、Filter需要在web.xml中配置，依赖于Servlet；
（2）、Interceptor需要在SpringMVC中配置，依赖于框架；
（3）、Filter的执行顺序在Interceptor之前，具体的流程见下图；

（4）、两者的本质区别：拦截器（Interceptor）是基于Java的反射机制，而过滤器（Filter）是基于函数回调。从灵活性上说拦截器功能更强大些，Filter能做的事情，都能做，而且可以在请求前，请求后执行，比较灵活。Filter主要是针对URL地址做一个编码的事情、过滤掉没用的参数、安全校验（比较泛的，比如登录不登录之类），太细的话，还是建议用interceptor。不过还是根据不同情况选择合适的。

