Web 安全
	web的几种攻击方式
	1. 模拟请求使用压力测试工具重复发送请求（解决方式：Token+网站验证码--------防止机器模拟请求）
	2.XSS (过滤请求)
	3.防盗链（请求来源）
	4.SQL注入
		通过预编译解决

Session存放在哪 ？服务器Jvm内存里面。
Session创建流程：客户端向服务器端创建一个Session后，session值存放在服务器端，并且服务器端返回一个Sessionid给客户端。客户端使用SessionId 去查另一个集群Tomcat ，由于Session存放在各自Jvm里面，所以会产生Session共享问题

Session共享有哪些解决方案：
	1.使用SpringCloud-session+Redis解决
		SpringCloudSession框架，把Session缓存到Redis中。
	2.使用负载均衡策略：ip绑定，使客户端访问跳转到固定IP中
	3.使用Cookie （不安全）
	4.把session存在数据库中 （对数据库压力太大）
	5.tomcat 内置对session同步可配置session共享（浪费内存）同步产生延迟
	6.使用Token重写session
怎么解决服务器重启后Session失效问题？
	使用Redis 持久化方案（AOF、RDB）

高并发解决方案&高可用&吞吐量
	数据库：
		1.优化Sql语句
			1.先定位慢查询Sql
			2.防止全表扫描
			3.sql语句优化
			4.使用索引，注意索引使用事项
			5.分表分库（水平分割+垂直分割）
			垂直分割:将本来可以在同一个表的内容，人为划分为多个表。（所谓的本来，是指按照关系型数据库的第三范式要求，是应该在同一个表的。） 
			分表理由：根据数据的活跃度进行分离，（因为不同活跃的数据，处理方式是不同的）
			水平分割:字面意思，就可以看出来，是把大的表结构，横向切割为同样结构的不同表，如，用户信息表，user_1,user_2 等。表结构是完全一样，但是，根据某些特定的规则来划分的表，如根据用户ID来取模划分。 
			分表理由：根据数据量的规模来划分，保证单表的容量不会太大，从而来保证单表的查询等处理能力。 
			6.水平分割,取模算法
			7.主从复制（Mysql集群）
				原理：通过二进制日志文件传输快照文件
			8.读写分离（使用mycat）
	缓存机制
		1.redis 缓存数据库内容
		2.redis集群（主从复制）
		3.redis读写分离
		4.使用redis哨兵机制监听
	服务器
		反向代理、配置负载均衡、集群、CDN加速
	客户端
		减少请求，用户体验好，最好使用ajax异步加载、动静分离
	项目优化
		代码重构、JVM调优（使用垃圾回收机制，配置老年代与新生代容量比例，尽量回收新生代，2:1，减少垃圾回收次数，增加jvm初始内存）
			垃圾回收机制有哪些算法
				标记压缩、分代收集算法、复制算法、标记清除算法、引用计数法
				为什么老年代使用标记压缩、新生代使用复制算法
					　　因为垃圾回收时的停顿现象
					　　垃圾回收的任务是识别和回收垃圾对象进行内存清理，为了让垃圾回收器可以更高效的执行，大部分情况下，会要求系统进如一个停顿的状态。停顿的目的是为了终止所有的应用线程，只有这样的系统才不会有新垃圾的产生。同时停顿保证了系统状态在某一个瞬间的一致性，也有利于更好的标记垃圾对象。因此在垃圾回收时，都会产生应用程序的停顿。
什么是CDN加速？
	购买多个CDN节点，在多个地区进行部署，从近访问服务器，减轻宽带的传输
怎么解决跨域问题
	1.使用网关实现：保证域名相同，使用Nginx区分不同项目路径进行转发
			upstream backserver{
	            #ip_hash;
	            server 127.0.0.1:8080 weight=1;
	            server 127.0.0.1:8081 weight=1;
			}


Web安全常见攻击手段：XSS（在页面中提交javaScript代码（alert））、SQL注入、防盗链（防止跨域请求资源（图片））、CSRF、上传文件漏洞
	什么是XSS攻击：XSS就是使用JavaScript脚本语言攻击
		XSS攻击使用Js脚本语言，因为浏览器默认支持脚本语言执行，如果在表单提交脚本参数时，可能浏览器会直接执行
		XSS漏洞场景：A请求提交表单信息，表单信息转发到另一个页面进行展示 文本框提交<script>window.location.href="http://www.baidu.com"</script>内容 ，会跳转到其他页面、例如：论坛、评论
		XSS解决方案：字符替换<script></script> 中的小于号（&lt;）大于号（&gt;）需要进行特殊字符转义
			在程序中如何解决：写一个过滤器，拦截所有的参数请求，将特殊字符进行转换。<（&lt;）>（&gt;）
		如何防御XSS攻击：程序中写一个过滤器，拦截所有请求，将表单提交的特殊字符（如<>/）进行转换，防止XSS攻击。直接使用第三方Html特殊字符转换工具类。
			StringEscapeUtils.escapeHtml4("<script>");
	什么是Sql注入攻击
		SQL注入原理：如果在程序代码中，dao层的sql语句如果使用拼接方式，那么可能会有sql注入问题
			密码 输入 123' or '1=1 使sql成立
			select id,username,password,age from User where username='' and password='123' or '1=1' 
			mybatis 不要使用拼接方式$  最好使用预编译方式#{}
				mybatis中# 与 $ 区别：
				# 会预编译语句，可以有效防止SQL注入攻击。使用$ 需要SQL语句拼接 ，可能会受到SQL语句攻击
	什么是防盗链技术：
		限制服务器的资源（如图片，视频文件）只能在某个域名（限制某台服务器）来源上进行访问
			互联网通讯本质上使用了Socket技术，Socket技术通过二进制文件进行传输。
		底层原理：使用过滤器拦截请求，通过Http请求头中的Referer字段，Referer字段中纪录了访问来源（例如，浏览器访问链接地址），判断Referer字段与需要限制的域名是否一致，如果不一致，说明可能被盗用
	什么是CSRF（模拟请求）
	互联网API接口幂等设计：防止数据重复提交（防止模拟请求）（唯一性）
		防止模拟请求（接口幂等）解决方案：
		怎样防止网络延迟重复提交： 推荐使用Token令牌方式
			1.MVCC方案（乐观锁）更新带条件（version）：适合多版本并发控制，适用于秒杀，不适合于在幂等设计中
				首先查询当前 User信息对应版本号
				update User set username="username",version=version+1 where version="当前版本号";
			2.去重表 插入数据时，插入去重表
			3.悲观锁 ，执行过程中，直接对该记录上锁，在读的情况较多时，可能对数据库性能造成影响。
			4.Token令牌方式
				适用Token令牌方式防止重复提交(适用于网络延迟造成的幂等性问题)
				彻底分析防止伪造Token请求攻击（CSRF）
					如何防止模拟请求：如果使用HttpClient模拟攻击（如果用户提前多次生成好Token ，再恶意重复提交。）
					如何防止机器模拟请求: 使用程序语言发送请求。
						使用图形验证码防止机器模拟请求、Nginx实现限流、配置网关黑名单白名单。*********
						市面上没有100%的完全识别。
					如何防止伪造Token请求，在互联网电商项目中，会话信息（Session）使用令牌方式保存。
					如何防止他人抓包分析令牌，黑客使用抓包获取的令牌伪造请求支付、下单等核心业务。

					在互联网中，没有绝对防止抓包分析令牌的方式
					但是可以在调用接口时，确认是否为本人操作
						一般使用短信验证码方式或者图像识别方式
			5.忘记密码漏洞：（假设验证码为4位数字）
				如何防止暴力破解找回密码：
					1.验证码最好不要单纯全部是数字
					2.建议验证码使用数字+字母混合
					3.如果找回密码接口重试五次以上还是出现错误，那么就需要使用图形验证码来判断是否为机器操作。
					4.配置 防止DDOS ，限流，限制IP访问（Nginx），黑名单白名单系统
				隐藏域（在做值的传递的时候，最好不要使用隐藏域 <input type="hidden" />）
			6.使用上传文件漏洞格式化服务器硬盘（上传可运行文件）
				什么是上传文件漏洞
					上传文件漏洞原理：就是上传文件的时候，没有限制文件格式，导致任意上传文件，如果上传木马文件（可执行程序 删除文件）的情况，可能回导致服务崩溃
				如何防御上传文件漏洞：
					1.对文件上传格式做限制，并判断文件流的方式确定文件格式，最好不要判断后缀。
					2.静态资源与动态资源不要放在同一个服务器上，（Nginx+Tomcat实现动静分离）nginx无法执行a.jsp 文件
					3.服务器环境上硬盘不能做删除操作。
					4.java服务器上不要有热部署功能
					5.限制上传class文件、jsp、exe可执行程序
			7.其他漏洞
				程序报错时，应使用全局捕获异常统一返回错误信息，防止数据库字段信息泄露。
				注释漏洞：   jsp 中应使用<%--    --%> 注释 不应使用Html注释 <!-- -->


信息加密与漏洞扫描：对称加密与非对称加密