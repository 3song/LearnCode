分布式事务

1.分布式事务产生的背景
	传统项目大部分情况下，不会产生分布式事务问题，但是如果在项目中使用多数据源，那么有可能会产生分布式事务问题。
		多数据源情况使用项目分包或是使用注解区分数据源
	在微服务情况下，项目会根据不同的业务模块拆分成不同的服务通过Rpc远程技术相互调用，具有独立的数据库，互不影响。
		例如：订单服务和库存服务一致性问题
			用户下单后，如果扣除库存失败，订单服务需要判断状态码并手动回滚事务。不构成分布式事务问题
			用户下单失败，库存扣除成功，那么会导致多卖。**********************这才会导致分布式事务问题
			由于每个服务的数据源是独立的，每个数据源中有自己独立的事务，该事务被称为本地事务
			本地事务有效范围在同一个Jdbc连接里面
2.解决分布式事务的基本思想Base和CAP理论
	ACID（原子性，一致性，持久性，隔离性）酸碱平衡理论
		事务隔离级别有4种：*************
			读未提交（Read Uncommitted）
			读提交（Read Committed）
			可重复读（Repeated Read）
			串行化（Serializable）
		事务的传播级别有七种
		分布式概念名词：CAP（帽子理论）和Base理论，柔性事务和刚性事务，理解最终一致性思想，JTA+XA，2PC和3PC提交等。
	CAP理论（帽子理论）
		C-----一致性:在分布式系统中的所有数据（包括备份数据），在同一时刻具有同样的值，所有节点在同一时刻读取的数据都是最新的数据副本
		A-----可用性：好的响应性能，完全的可用性指的是在任何故障模型下，服务都会在有限的时间内处理完成并进行响应（即使是报错情况）
			一般使用集群方式，进行主备切换。
		P-----分区容错性：尽管网络上有部分数据丢失（网络延迟或宕机），但系统仍然可以继续工作。******************************
	在CAP理论中，这三个要素最多只能实现两点，CP，AP，不可能三者兼顾，因此在分布式架构设计时，必须有所取舍，对于分布式系统来说，分区容错性是基本要求，否则分布式就失去的价值，因此，一般设计分布式系统，就是在一致性或可用性之前进行取舍，对于大多数应用，其实并不需要强一致性，只需要保证最终一致性即可（通过手动补偿或重试实现）因此牺牲一致性换取高可用性，是多数分布式数据库产品的方向。*****
	一般遵循AP原则(Base理论)：保证分区容错和高可用性
	Base理论（BASE理论是Basically Available(基本可用)，Soft State（软状态/柔性事务）和Eventually Consistent（最终一致性））*******
		BASE理论是Basically Available(基本可用)，Soft State（软状态）和Eventually Consistent（最终一致性）三个短语的缩写。
			既然无法做到强一致性（Strong consistency），但每个应用都可以根据自身的业务特点，采用适当的方式来使系统达到最终一致性（Eventual consistency）
			基本可用：指分布式系统在出现故障时，允许损失部分可用性，保证核心可用性，但不等于不可用。
				例如：搜索引擎0.5s返回查询结果，但由于故障，2s返回查询结果（依然保证可用，只不过时间变长了）；网站访问量过大，部分用户提供降级服务（依然保证大部分人可用，不影响系统运作）
			软状态：软状态指允许系统出现中间状态，并且该中间状态不会影响到系统整体可用性，即允许系统在不同节点间数据同步时存在延时，例如支付过程中会显示“支付中....”页面。或者如支付项目调用支付宝接口时，如果支付项目服务器发生宕机，那么数据肯定会不一致，但是通过重试补偿机制，达到最终的数据一致性即可。
			最终一致性：指系统中所有的数据副本经过一段时间后，最终能达到一致的状态，但不需要实时保证系统数据的强一致性。最终一致性是弱一致性的一种特殊情况。Base理论通常面向大型高可用可扩展系统，通过牺牲强一致性来获得可用性。ACID的传统单机数据库常用的概念设计，追求强一致性的模型。
				例如：支付项目调用支付宝接口时，支付宝接口返回同步回调地址和异步回调地址*****************
					同步回调地址：支付完成之后，支付宝采用浏览器重定向方式进行回调。
					异步回调地址：支付完成之后，支付宝采用后台方式也就是类HttpClient方式进行调用支付服务中的通知接口，返回用户支付结果信息。
			当通知接口出现延迟或者异常的情况下，支付宝会进行自动重试，重试过程中，支付项目应注意幂等性问题。或者手动调用支付宝接口获取用户支付结果
			这种方式适用于调用外部接口时解决分布式事务问题。这种方式支持跨语言访问，因为都使用HttpClient发送数据。
3.柔性事务和刚性事务的区别
	柔性事务：
		柔性事务满足Base理论（基本可用，最终一致性）
		柔性事务分为：
			1.两阶段型（两阶段提交协议）JTA+XA
				1.准备阶段：协调者（全局事务管理器）向参与者（订单服务、库存服务）发起指令、参与者会评估自己的状态，如果参与者评估自己可以完成，则会写redo或undo日志，然后参与者锁定资源，执行操作，这时并不会提交
				2.提交阶段：如果每个参与者都明确返回准备成功，则协调者向参与者发送提交指令，参与者释放掉锁的资源，如果任何一个参与者明确返回准备失败，则协调者会发送终止指令，参与者同时取消回滚已经变更的事务。释放锁定的资源
				缺点：
					1.两段提交应用广泛，几乎所有的OLTP数据库都支持XA协议，但是两段提交方案锁定资源时间较长，对性能影响很大，基本不适合解决微服务事务问题。
					2.如果协调者发生宕机，参与者没有协调者指挥，则会进入阻塞状态。数据会进行锁定
			三段提交协议：
				是两段提交协议的改进版本，它通过超时机制解决了阻塞问题，并且在之前增加了一个询问阶段。
				1.询问阶段：协调者询问参与者是否可以完成指令，协调者只需要返回true或者false，而不需要做真正的操作，这个阶段如果发生超时的情况下（全局事务协调者宕机），那么就会终止事务。
				2.准备阶段：准备阶段超时会返回成功。
				3.提交阶段：如果每个参与者都明确返回准备成功，则协调者向参与者发送提交指令，参与者释放掉锁的资源，如果任何一个参与者明确返回准备失败，则协调者会发送终止指令，参与者同时取消回滚已经变更的事务。释放锁定的资源。
			两段提交协议和三段提交协议的区别：
				三段提交协议增加了一个询问阶段，询问阶段作用是确保尽可能早的发现无法执行操作而需要终止的行为，但是它也不能发现所有需要终止的行为，只是尽可能少的减少这种情况的发生，在准备阶段后协调者和参与者都继续提交事务，默认为成功，这也是在确保概率统计上超时后默认成功的正确性最大。
			三段提交协议优点：
				保证超时后默认成功的正确性最大。但是一旦系统发生超时，系统仍然会不一致，只不过这种情况很少见，好处就是至少不会阻塞和永远的锁定资源。
			2.补偿型（支付项目调用支付宝接口）
			3.异步确保型
			4.最大努力通知型（支付宝通过回调方式通知支付项目）
	刚性事务：
		刚性事务满足ACID理论（原子性、一致性、隔离性、持久性）
4.理解解决分布式事务核心思想软状态和最终一致性思想
5.分布式事务常见解决方案
	1.传统项目使用JTA和Atomkos 
	2.2PC（两段提交协议）和3PC（三段提交协议）的区别
	3.使用阿里巴巴TCC补偿框架（Dubbo使用）
	4.使用可靠消息模式（RabbitMQ）
	5.使用LCN框架解决分布式事务
	6.阿里GTS框架解决分布式事务


6.分布式事务解决方案面试题解析

7.使用LCN框架解决分布式事务
	LCN框架解决分布式事务原理：事务协调者重写AOP方法，在事务执行时会进行如下步骤。
		1.LCN客户端（发起方和参与方都要注册到事务协调者中）建立一个长连接。
		2.订单服务（发起方）调用库存服务接口（参与方）之前会向TxManager全局事务协调者创建一个事务分组id
		3.订单服务（发起方）调用库存服务接口（参与方）的时候，会在请求头中存放该事务的分组id，并发送给库存服务
		4.如果库存事务获取到请求头中有对应的事务分组id，库存服务的业务逻辑代码执行完毕时，会使用假关闭，不会提交该事务
			参与方在什么时候提交事务？
				答：在发起方执行完毕并成功时。
		5.订单服务（发起方）调用库存服务接口（参与方）之后，如果该订单服务（发起方）执行没有异常的情况下，订单服务（发起方）使用对应的事务id，通知给TxManager全局事务协调者，然后TxManager全局事务协调者再根据该事务的分组id，通知给所有的参与方（订单服务，库存服务）提交事务。

8.LCN框架源码分析
	