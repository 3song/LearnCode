
Mysql
	集群目的：减轻单台服务器压力、主从复制、（读写分离）  
	主从复制是Mysql自带的功能，主从复制可能会导致数据一致性问题。
		作用：读写分离，数据库备份，高可用（服务器宕机容错机制）、集群
		mysql主从复制原理：通过二进制sql执行文件
			二进制sql执行文件原理：insert 、update、delete 以日志的形式存储。
	读写分离（第三方mycar） 
		作用：提高IO性能，减少阻塞

Mysql 主从复制配置
	1.配置主节点信息（）
	2.设置从服务器读取账号权限
	3.同步

主服务器my.cnf配置

log-bin=mysql-bin
从库会基于此log-bin来做复制
server-id=1

主服务器my.cnf配置
server-id=2
从库会基于此log-bin来做复制
#replicate-do-db=test
#用于读写分离的具体数据库，这里我创建了mytest作测试
#选择row模式 
#binlog-format=ROW

----------主服务器创建从服务器连接账号
CREATE USER 'slave1'@'%' IDENTIFIED WITH mysql_native_password BY 'slave1';
GRANT REPLICATION SLAVE ON *.* TO 'slave1'@'%';
flush privileges;
SHOW MASTER STATUS;

------------从服务器  配置手动同步
stop slave;
CHANGE MASTER TO
MASTER_HOST='192.168.200.8',
MASTER_USER='slave1',
MASTER_PASSWORD='slave1',
MASTER_LOG_FILE='mysql-bin.000002',
MASTER_LOG_POS=2185;

start slave;

show slave status

set GLOBAL SQL_SLAVE_SKIP_COUNTER=0;

Mysql 读写分离----前提是主从复制
	由中间件（MyCat）判断数据库读与写的请求，由中间件来对请求进行转发到对应的数据库
	优点：不暴露真实ip地址，使数据库更加安全-------反向代理，实现负载均衡，无需在数据库层面配置权限，由Mycat中间件来判断并转发

索引

Mysql常见索引有：主键索引、唯一索引、普通索引、全文索引、组合索引
PRIMARY KEY（主键索引） ALTER TABLE `table_name` ADD PRIMARY KEY ( `column` ) UNIQUE(唯一索引) ALTER TABLE `table_name` ADD UNIQUE (`column`)
INDEX(普通索引)      ALTER TABLE `table_name` ADD INDEX index_name ( `column` ) FULLTEXT(全文索引) ALTER TABLE `table_name` ADD FULLTEXT ( `column` )
组合索引    ALTER TABLE `table_name` ADD INDEX index_name ( `column1`, `column2`, `column3` )

Mysql各种索引区别：

普通索引(INDEX)：最基本的索引，没有任何限制
唯一索引(UNIQUE)：与"普通索引"类似，不同的就是：索引列的值必须唯一，但允许有空值。
主键索引(PRIMARY)：它 是一种特殊的唯一索引，不允许有空值。
全文索引(FULLTEXT )：仅可用于 MyISAM 表， 用于在一篇文章中，检索文本信息的, 针对较大的数据，生成全文索引很耗时好空间。
组合索引：为了更多的提高mysql效率可建立组合索引，遵循”最左前缀“原则。

主键是一种约束，唯一索引是一种索引，两者在本质上是不同的。

主键创建后一定包含一个唯一性索引，唯一性索引并不一定就是主键。

唯一性索引列允许空值，而主键列不允许为空值。

主键列在创建时，已经默认为空值 + 唯一索引了。

主键可以被其他表引用为外键，而唯一索引不能。

一个表最多只能创建一个主键，但可以创建多个唯一索引。

主键更适合那些不容易更改的唯一标识，如自动递增列、身份证号等。

在 RBO 模式下，主键的执行计划优先级要高于唯一索引。 两者可以提高查询的速度。

1、表的主键、外键必须有索引；
2、数据量超过300的表应该有索引；
3、经常与其他表进行连接的表，在连接字段上应该建立索引；
4、经常出现在Where子句中的字段，特别是大表的字段，应该建立索引；
5、索引应该建在选择性高的字段上；
6、索引应该建在小字段上，对于大的文本字段甚至超长字段，不要建索引；
7、复合索引的建立需要进行仔细分析；尽量考虑用单字段索引代替：
A、正确选择复合索引中的主列字段，一般是选择性较好的字段；
B、复合索引的几个字段是否经常同时以AND方式出现在Where子句中？单字段查询是否极少甚至没有？如果是，则可以建立复合索引；否则考虑单字段索引；
C、如果复合索引中包含的字段经常单独出现在Where子句中，则分解为多个单字段索引；
D、如果复合索引所包含的字段超过3个，那么仔细考虑其必要性，考虑减少复合的字段；
E、如果既有单字段索引，又有这几个字段上的复合索引，一般可以删除复合索引；
8、频繁进行数据操作的表，不要建立太多的索引；
9、删除无用的索引，避免对执行计划造成负面影响；


1、定义:    

单一索引：

单一索引是指索引列为一列的情况,即新建索引的语句只实施在一列上;     

 

复合索引：

复合索引也叫组合索引；

用户可以在多个列上建立索引,这种索引叫做复合索引(组合索引)。

复合索引在数据库操作期间所需的开销更小,可以代替多个单一索引;    

同时有两个概念叫做窄索引和宽索引,窄索引是指索引列为1-2列的索引,宽索引也就是索引列超过2列的索引;     

设计索引的一个重要原则就是能用窄索引不用宽索引,因为窄索引往往比组合索引更有效;

 

2、使用:   

创建复合索引 ：

CREATE INDEX columnId ON table1(col1,col2,col3) ;
查询语句： 

  select * from table1 where col1= A and col2= B and col3 = C
这时候查询优化器,不在扫描表了,而是直接的从索引中拿数据,因为索引中有这些数据,这叫覆盖式查询,这样的查询速度非常快;  

 

 3、注意事项:    

1、对于复合索引,在查询使用时,最好将条件顺序按找索引的顺序,这样效率最高;    

 select * from table1 where col1=A AND col2=B AND col3=D 
如果使用

 where col2=B AND col1=A 
或者 

where col2=B 
将不会使用索引。 最左匹配原则

 

2、何时是用复合索引     根据where条件建索引是极其重要的一个原则;     注意不要过多用索引,否则对表更新的效率有很大的影响,因为在操作表的时候要化大量时间花在创建索引中

3、复合索引会替代单一索引么     如果索引满足窄索引的情况下可以建立复合索引,这样可以节约空间和时间

 

4、备注:    

 对一张表来说,如果有一个复合索引 on   (col1,col2),就没有必要同时建立一个单索引 on col1；    

如果查询条件需要,可以在已有单索引 on col1的情况下,添加复合索引on (col1,col2),对于效率有一定的提高；     

同时建立多字段(包含5、6个字段)的复合索引没有特别多的好处,相对而言,建立多个窄字段(仅包含一个,或顶多2个字段)的索引可以达到更好的效率和灵活性。

 