Elasticsearch 框架

是一个基于Lucene构建的开源、分布式、RestFul接口全文搜索引擎框架
	Elasticsearch同时也是一个分布式文档数据库，存放json数据。
	一个分布式的实时文档存储，每个字段可以被索引与搜索；
	一个分布式实时分析搜索引擎；
	能胜任上百个服务节点的扩展，并支持 PB 级别的结构化或者非结构化数据。
为了解决Lucene使用时的繁复性，于是Elasticsearch便应运而生。它使用 Java 编写，内部采用 Lucene 做索引与搜索，但是它的目标是使全文检索变得更简单，简单来说，就是对Lucene 做了一层封装，它提供了一套简单一致的 RESTful API 来帮助我们实现存储和检索。

Elasticsearch 优势
	横向扩展性强：只需要增加服务器，做较少配置，启动Elasticsearch就可以使服务器加入Elasticsearch集群
	分片机制提供更好的分布性：同一个索引分成多个分片，类似HDFS块机制，分而治之可以提升处理效率
	高可用：提供复制（replica）机制，一个分片可以设置多个复制，使得某台服务器宕机的情况下，集群依旧可用，并且会把服务器宕机丢失的数据复制恢复到其他节点上
Elasticsearch 应用场景
	大型电商商品搜索系统，网站站内搜索，网盘搜索引擎，大型分布式日志分析系统ELK Elasticsearch（存储日志）+logstash（收集日志）+kibana(展示数据)

Elasticsearch 存储结构
	返回的数据格式为JSON，因为Elasticsearch中的文档以JSON格式储存。******
	关系型数据库结构为
		--数据库
		----表（用户表）
		------行（数据行）
		--------列(Columns)
	Elasticsearch 为
		--索引(index)
		----类型(type)
		------文档(document)
		--------字段(Fields)

Elasticsearch安装  
	访问路径http://192.168.200.3:9200/
	Elasticsearch 默认不允许Root用户启动
	启动停止
		：两种原因
		修改配置文件
		需要加入servername 和clutername 导致 kibana 无法连接
切换到kibana安装目录的bin目录下，执行kibana文件
后台启动：

nohup ./kibana & 
或者
nohup ./kibana >/dev/null &
前台启动：
./kibana
后台停止：
- 查看进程号 jps 或者 ps -ef|grep kibana  或者 ps -ef|grep 5601
- 杀死进程 kill -9 进程号
前台停止：
ctrl + C

Elasticsearch 版本控制
	使用CAS无锁机制（乐观锁方式）
	为了保证多线程操作下的准确性

	悲观锁与乐观锁
	悲观锁：假定数据会发生并发冲突，屏蔽一切可能违反数据准确性的操作
	乐观锁：假定数据不会发生并发冲突，只是在提交操作时检查数据是否违反数据完整性，乐观锁是自旋锁，不会进行等待

	Elasticsearch 分为内部版本控制和外部版本控制
		内部版本控制:_version 自增长，修改数据后(put) ,_version 会自动加1
		外部版本控制：为了保证_version与外部版本控制的数值一致
		在kibanaPut操作时 使用version_type=external 检查数据当前的version值是否小于请求中的version值*****
			PUT /root_index/_doc/1?version=6
			{
			  "name":"chenlei",
			  "age":21,
			  "sex":0
			}
		Oracle 版本控制通过时间戳实现版本控制
Kibana 9200端口 和9300 端口区别
	9300 Es节点之间通讯端口号
	9200 Es节点和外部通讯使用端口号

	9300 是TCP协议端口号 ，是Es集群通讯端口号 底层
	9200是Http协议端口号，是暴露ES restful接口端口号   可以调用PUT GET 
Kibana 访问路径 http://192.168.200.3:5601/app/kibana#/dev_tools/console
	启动报错 curl -XDELETE http://localhost:9200/.kibana* 需删除索引
	http://192.168.200.3:9200/_cat/indices?v 查看索引状态

	curl -XDELETE 'http://192.168.200.3:9200/root_index/oSosqHIBNwZH0tZljHkJ' 根据id删除
Elasticsearch倒排索引
	为什么倒排索引比数据库中的B-tree树查询效率快？
		正向索引：一般查询都是根据关键词去检索所有内容
		倒排索引：首先对文档内容进行关键词分词，定义关键词词库，查询关键词时，直接返回包含关键词的文档内容的id即可,所以，倒排索引必须定义关键词库或者通过调用第三方词库（IK）
		倒排索引由于会经常后台进行分词，效率不高
			ES默认分词器 是standard，中文分词会单字拆分
		全文检索底层采用倒排索引。
	
DSL查询
	match模糊查询
	term 精确查询

分词器
	IK中文分词器 
		参数为ik_smart
	IK自定义扩展词（热词）
		在 ik插件目录 /IKAnalyzer.cfg.xml 文件中配置
文档映射
	查询索引映射 /root_index/_mapping
	String 类型分为Text 和Keyword 区别为
		Text：会进行分词查询
		Keyword：不会进行分词查询

ES如何实现分布式高并发全文检索？
	ES主要存储的数据是什么？ 索引
	如果ES实现了集群的话，会将单台服务器节点的索引文件使用分片技术，分布式存放在多个不同的物理机器上，实现了ES高可用。

ES分片Shards分片技术
	什么是分片技术
		将数据拆分成在多个节点进行存放。
	在ES分片技术中分为主分片（primary）和副分片（Replicas）技术，可以更好的实现容错性。
		Shards分片：代表索引分片，Es可以把一个完整的索引分成多个分片，这样的好处是可以把一个大的索引拆分成多个，分布到不同的节点上去，构成分布式搜索，分片的数量只能在索引创建之前指定，并且索引创建后不能更改。
		Replicas分片：代表索引副本，Es可以设置多个索引的副本，副本的作用是提高系统的容错性，当某个分片损坏或者丢失时，可以从副本中恢复，二是提高Es的查询效率，Es会自动对搜索请求进行负载均衡。
ES集群原理分析：
	"number_of_shards": "1", //主分片
    "number_of_replicas": "1",//副分片 表示倍数
    单台ES服务器中没有备分片
	默认创建索引是分配5个分片进行存储。每个分片都会分布部署在多个不同的节点上进行部署。该分片就是主shards分片
	在ES中每一个主分片都会对应有一个副分片（备份分片），而且不能在同一个服务器上进行存放。
	ES官方建议 服务器备份节点数量算法为 主分片的平方
为什么ES主分片对应的备分片不在同一台节点存放
	再同一台服务器存储，无法保证高可用，服务器宕机，数据即丢失
为什么主分片数量定义好后不能修改？
	因为ES使用了路由算法。
		路由算法：shard=hash（routing）%primary_shards （主分片数量）
		routing值表示索引id
		作用：通过索引id唯一值取模主分片数量，实现服务器集群负载均衡存储文档数据。在查询文档时，底层根据文档id%（取模)主分片数量来获取文档存放位置。
		通过某个es集群ip查询其他es服务器上的数据，底层会实现转发到对应es服务器。
ES如何实现高可用集群容错方案

搭建Linux上三台ES高可用集群环境
	核心思想：配置相同的Cluster-Name，实现服务在同一集群下，而使用不同的节点名防止重复服务
	修改配置文件：Elasticsearch.yml 
		ip 、node.name
		底层默认开启9300端口集群
ES是如何解决高并发
	ES是全文检索框架，隐藏的复杂的处理机制，内部使用了分片机制，集群发现，分片负载均衡请求路由
网盘搜索引擎实现原理：
	 Text类型：模糊查询，被分词的词语也会并列查出
	 	例如：2018史上最全SpringBoot 会查出  史上、最全、SpringBoot 相匹配的所有数据。*****最重要
	 	计算程序耗时时间使用AOP在方法之前和之后时间相减