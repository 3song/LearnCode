设计模式概述
主要作用：代码复用、代码易于扩展、提高阅读性、减少代码
设计模式一共有23种
分为三大类：
	创建型：
		工厂模式、*单例模式*
	结构型：
		代理模式、适配器模式、
	行为型：
		策略模式、
设计模式的六大原则：
	1.开闭原则：扩展性、易于修改
	2.里氏代换原则：面向对象 oop
	3.依赖倒转原则：面向接口编程
	4.接口隔离原则：接口隔离
	5.迪米特原则：定义类尽量不要和其它类发生过多关系
	6.合成复用原则：代码复用

单例模式
	作用：保证jvm中只能有一个类的实例使用。能减少jvm资源消耗，但是有可能产生线程安全问题
	分为懒汉式和饿汉式。
		***********共同点：把构造函数私有化，不允许通过new 的方式创建对象，而是重写一个静态方法 返回类型为你要创建的对象，创建对象时，调用静态方法创建对象；
		区别：懒汉式----线程不安全，是需要时才会创建，解决线程安全问题需要双重检验锁
				结论：非线程安全，当多个线程执行到1处会产生多个实例
			饿汉式：线程天生安全，由于加了static关键字 jvm加载时就会被初始化
				结论：线程安全、绝对单例
				缺点：假设有多个实例或静态方式时，没用到的实例也初始化了，浪费内存
			静态内部类方式：
			public class Singleton {

			    private static class SingletonHolder {
			        private static Singleton instance = new Singleton();
			    }

			    private Singleton() {
			        
			    }

			    public static Singleton getInstance() {
			        return SingletonHolder.instance;
			    }
			}	
			枚举方式：
			public enum Singleton {

			    INSTANCE;
			    private User user;
			    public static void getUser() {
			       new User();
			    }

			}
			调用方法：

			public class Main {

			    public static void main(String[] args) {
			        Singleton.INSTANCE.get;
			    }

			}
工厂模式：
	作用：实现创建者和调用者分离、提高代码阅读性。 提取出类的公共部分编程接口 个体类实现公共类接口的方法。
	汽车 ---汽车Factory 创建汽车类的静态方法 ----奥迪和宝马调用汽车工厂创建对应的汽车

代理设计模式：
	什么是代理设计模式：代理对象中调用被代理对象中的相同方法。
	优点：保证真实角色
	应用：远程代理：RMI、延迟加载：Lazy、AOP 面向切面编程（控制切入点）、日志打印、事务、权限控制
	代理分类：
		静态代理
			缺点：需要生成代理类。代理父类类新增新方法时，代理对象和代理类都要重写此方法
		动态代理：分为JDK动态代理和CGLIB动态代理
			不需要生成代理类。代理父类类新增新方法时，代理对象和代理类无需重写此方法
				JDK动态代理和CGLIB动态代理区别：
				Jdk动态代理是通过反射机制生成一个实现代理接口的匿名类，在调用具体方法时使用InvokeHandler来处理。
				而Cglib是利用ASM开源包加载代理对象类的class字节码，通过修改其字节码生成子类来处理。
				1.如果目标对象实现了接口，默认使用JDK的动态代理实现AOP
				2.如果目标对象实现了接口，可以强制使用CGlib动态代理实现AOP
				3.如果目标对象没有实现接口，那么必须使用Cglib库，Spring会自动在JDK动态代理和Cglib代理之间转换

