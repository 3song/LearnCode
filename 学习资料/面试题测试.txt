面试题测试
	多线程作用是什么
		1处理高并发下全局变量共享问题
	项目中那些地方使用多线程
		多线程处理后台任务
			一般来说，我们需要在后台处理的任务，通常会使用定时器来开启后台线程处理，比如有些数据表的状态我需要定时去修改、我们搜索引擎里面的数据需要定时去采集、定时生成统计信息、定时清理上传的垃圾文件等。
		多线程异步处理任务
			当我们需要处理一个耗时操作并且不要立刻知道处理结果时，我们可以开启后台线程异步处理该耗时操作，这样可以提高用户体验。比如我之前做的一个项目需要上传简历附件，后台需要对简历附件进行解析，保存到数据表中，因为涉及多种格式的处理，所以我们开启多线程异步处理此操作，这样用户就不用等到我们的简历解析完就能看到服务端的响应了。再比如用户下载简历时，我们需要将数据表中的数据生成简历附件并且通过邮件发送到用户邮箱，该操作也可以开启多线程异步处理。
		多线程分布式计算
	进程和线程的区别是什么
		进程就是正在运行的程序，它是线程的集合。 进程中一定会有一个主线程。
		线程相当于正在独立运行的进程的一个执行路径。
	JAVA实现线程有哪几种方式
		继承Thread类，重写run方法 并执行thread.start()   
		重写Runable接口 的run方法 并执行thread.start()   
		采用线程池方式创建线程
			1.定时器线程池
			2.定长线程池
			3.可缓存线程池
			4.单线程池
		实现Callable接口
		采用匿名内部类方式实现多线程
	启动线程方法start()和run() 有什么区别
		start是开启线程的方法
		run是通过Thread对象的实例在当前线程执行方法
	如何终止一个线程
		stop强制关闭线程不推荐，可能会造成方法会立即释放该线程所持有的所有的锁，导致数据得不到同步，出现数据不一致的问题。
		interrupt() 方法仅仅是在当前线程中打一个停止的标记，并不是真的停止线程。线程中断并不会立即终止线程，而是通知目标线程，有人希望你终止。至于目标线程收到通知后会如何处理，则完全由目标线程自行决定。
	线程的生命周期：
		1.创建状态，调用start之前的状态
		2.就绪状态，start()时，线程需要等待CPU调度完成
		3.运行状态  调用start()执行run方法时
		4.休眠状态 调用线程sleep方法时当前线程由运行状态变为准备状态，此时线程会返回到就绪状态重新等待cpu调度
		4.停止状态 调用stop或interrupt方法或者线程运行完毕时 当前线程将被停止
	线程安全问题
		原因：在程序中，可能出现多个线程同时调用一个全局变量进行运算，导致的数据不一致的问题
			1，多个线程在操作共享的数据。
			2，操作共享数据的线程代码有多条。
		线程之间如何实现同步
			1.使用syn代码块包裹需同步的代码 ，对象锁为this锁
			2.使用syn关键字修饰需同步的方法，对象锁为类的class锁
			3.Lock锁 使用并发包中的Lock类，RockLock 中的lock方法 实现上锁
			4.使用并发包中的AutoMe原子类解决共享变量同步问题 
			5.使用线程池解决同步问题
				单线程化线程池(newSingleThreadExecutor);
				可控最大并发数线程池(newFixedThreadPool);
				可回收缓存线程池(newCachedThreadPool);
				支持定时与周期性任务的线程池(newScheduledThreadPool)。
			6.CountDownLatch 使用计数器解决同步问题
		****Java内存模型
		****多线程之间如何进行通信 不会
		按顺序执行多个线程
			线程的join方法
			线程池方法：使用 Executors.newSingleThreadExecutor() 单线程池加入多个线程
				单线程化线程池(newSingleThreadExecutor):优点，串行执行所有任务。
				submit(Thread)：提交某一个线程任务。
				shutdown()：方法用来关闭线程池，拒绝新任务。
			线程的CountDownLatch（倒计数）方法
			semaphore(信号量)实现线程按顺序运行
				semaphore: semaphore是一个计数信号量,从概念上讲，semaphore包含一组许可证, 如果有需要的话，每个acquire()方法都会阻塞，直到获取一个可用的许可证, 每个release()方法都会释放持有许可证的线程，并且归还semaphore一个可用的许可证。然而，实际上并没有真实的许可证对象供线程使用，semaphore只是对可用的数量进行管理维护。
		什么是死锁，怎么预防死锁
			死锁检测
				JConsole工具
				Jstack命令
			多个线程互相调用对方的线程锁，导致锁资源无法释放。
				资源一次性分配：一次性分配所有资源，这样就不会再有请求了：（破坏请求条件）
				只要有一个资源得不到分配，也不给这个进程分配其他的资源：（破坏请保持条件）
				可剥夺资源：即当某进程获得了部分资源，但得不到其它资源，则释放已占有的资源（破坏不可剥夺条件）
				资源有序分配法：系统给每类资源赋予一个编号，每一个进程按编号递增的顺序请求资源，释放则相反（破坏环路等待条件）
			1.所有的线程锁都按照特定的顺序获取，规定好线程的执行顺序
			2.使用Lock接口设置锁的超时时间
				提供了boolean tryLock(long time, TimeUnit unit) throws InterruptedException方法，该方法可以按照固定时长等待锁，因此线程可以在获取锁超时以后，主动释放之前已经获得的所有的锁。通过这种方式，也可以很有效地避免死锁。
		wait和sleep方法的区别**********
			1.wait() 用于同步中，可以释放当前锁的资源给其他线程。sleep() 并不会释放锁的资源。
			2.wait() 需要使用nottify() 来使线程从休眠状态变为运行状态，sleep() 只需要时间到期，就可从休眠状态变为运行状态。
			3.wait() 在Object 类中，sleep() 在Thread 类中。
		什么是守护线程，有什么作用
			1.守护线程，专门用于服务其他的线程，GC线程就是一个典型的守护线程
			特点：和主线程一起关闭
		什么是java内存模型
			JMM目标：，其实是保证了Java程序在各种平台下对内存的访问都能够得到一致效果的机制及规范。目的是解决由于多线程通过共享内存进行通信时，存在的原子性、可见性（缓存一致性）以及有序性问题。
				有序性,由于编译器优化重排的存在，两个线程中使用的变量能否保证一致性是无法确定的。
			主内存和工作内存
	    	（1）所有变量均存储在主内存（虚拟机内存的一部分）
			（2）每个线程都对应着一个工作线程，主内存中的变量都会复制一份到每个线程的自己的工作空间，线程对变量的操作都在自己的工作内存中，操作完成后再将变量更新至主内存；
			（3）其他线程再通过主内存来获取更新后的变量信息，即线程之间的交流通过主内存来传递
		ThreadLocal是什么
			从名字我们就可以看到ThreadLocal叫做线程变量，意思是ThreadLocal中填充的变量属于当前线程，该变量对其他线程而言是隔离的。ThreadLocal为变量在每个线程中都创建了一个副本，那么每个线程可以访问自己内部的副本变量。
		ThreadLocal有什么用
			1、在进行对象跨层传递的时候，使用ThreadLocal可以避免多次传递，打破层次间的约束。
			2、线程间数据隔离
			3、进行事务操作，用于存储线程事务信息。
			4、数据库连接，Session会话管理。
		volatile与synchronized区别是什么
			volatile用来修饰属性，被volatile修饰的属性可以保证多个线程可见，但不会保证原子性
			synchronized 可以用来修饰同步代码块和方法 ，被synchronized包裹的代码同时只允许一个线程访问，保证了线程安全问题
		******什么是重排序
		我们知道创建一个对象分三步:
			memory=allocate();//1:初始化内存空间
			ctorInstance(memory);//2:初始化对象
			instance=memory();//3:设置instance（实例）指向刚分配的内存地址
		jvm为了提高程序执行性能，会对没有依赖关系的代码进行重排序，上面2和3行代码可能被重新排序。我们用两个线程来说明线程是不安全的。线程A和线程B都创建对象。其中，A2和A3的重排序，将导致线程B在B1处判断出instance不为空，线程B接下来将访问instance引用的对象。此时，线程B将会访问到一个还未初始化的对象（线程不安全）。
		什么情况下，重排序对线程有影响
		怎么保证线程可见性
			使用volatile修饰属性
重要补充
	先补充一下概念：Java 内存模型中的可见性、原子性和有序性。
可见性：
	可见性是一种复杂的属性，因为可见性中的错误总是会违背我们的直觉。通常，我们无法确保执行读操作的线程能适时地看到其他线程写入的值，有时甚至是根本不可能的事情。为了确保多个线程之间对内存写入操作的可见性，必须使用同步机制。
	可见性，是指线程之间的可见性，一个线程修改的状态对另一个线程是可见的。也就是一个线程修改的结果。另一个线程马上就能看到。比如：用volatile修饰的变量，就会具有可见性。volatile修饰的变量不允许线程内部缓存和重排序，即直接修改内存。所以对其他线程是可见的。但是这里需要注意一个问题，volatile只能让被他修饰内容具有可见性，但不能保证它具有原子性。比如 volatile int a = 0；之后有一个操作 a++；这个变量a具有可见性，但是a++ 依然是一个非原子操作，也就是这个操作同样存在线程安全问题。
	
	在 Java 中 volatile、synchronized 和 final 实现可见性。****
原子性：
	原子是世界上的最小单位，具有不可分割性。比如 a=0；（a非long和double类型） 这个操作是不可分割的，那么我们说这个操作时原子操作。再比如：a++； 这个操作实际是a = a + 1；是可分割的，所以他不是一个原子操作。非原子操作都会存在线程安全问题，需要我们使用同步技术（sychronized）来让它变成一个原子操作。一个操作是原子操作，那么我们称它具有原子性。java的concurrent包下提供了一些原子类，我们可以通过阅读API来了解这些原子类的用法。比如：AtomicInteger、AtomicLong、AtomicReference等。
	
	在 Java 中 synchronized 和在 lock、unlock 中操作保证原子性。
有序性：*****
　　Java 语言提供了 volatile 和 synchronized 两个关键字来保证线程之间操作的有序性，volatile 是因为其本身包含“禁止指令重排序”的语义，synchronized 是由“一个变量在同一个时刻只允许一条线程对其进行 lock 操作”这条规则获得的，此规则决定了持有同一个对象锁的两个同步块只能串行执行。  ********重中之重
		保证线程可见性有几种方式
		并发编程的理解
			主要解决多个线程访问全局变量导致的线程安全问题
		有界队列和无界队列的理解
			有界队列：可定义线程数量的队列
			无界队列：无需定义长度的队列，
		阻塞队列和非阻塞队列的理解
		JDK有哪些并发包
			原子类Double Float
			信号量
			计数器
		线程池有哪些分类
			1.单线程式线程池
			2.定长线程池 线程池长度定义好，一旦超过长度，会把其他线程放入队列进行等待
			3.定时器线程池
			4.可缓存队列线程池
		为什么要使用线程池
			为了更好的管理多线程的操作，实现线程复用，提高程序执行效率
		线程池实现原理***
			使用了Executors接口定义线程池
		线程池配置多少合适
		线程池启动线程submit() 和execute()方法的区别
		提交任务时队列已满会发生什么
			当队列满了的情况下，会将其他线程放入等待队列进行等待，如果等待时间过长，则会自动释放资源
		什么是活锁、饥饿、无锁、死锁？
		说几个常用Lock接口实现锁
			RackLock 重入锁
			ReadLock 读写锁
		Lock锁和synchronized锁区别是什么
			lock锁必须手动上锁，手动释放锁，而synchronized锁无需手动上锁与解锁，都是自动实现，即使报错，也是自动释放锁资源
		CyclicBarrier和CountDownLatch 的区别
			CountDownLatch 和 CyclicBarrier 都是计数器
			CountDownLatch 是首先定义一个整型数字，使用await()使线程上锁，调用countDown方法 来进行减1 当计数器为0是 才会释放锁资源执行await()后面的代码
			CyclicBarrier 调用await()进行上锁  在所有线程执行完成之后，才并行执行 await()后面的方法
		ThreadPoolExecutor 有哪些参数
		你了解哪些锁
		什么是重入锁
		乐观锁与悲观锁有哪些区别

		Fork/Join 框架是干什么的
		你用过哪些原子类
		原子类的原理是什么
			底层使用 synchronized 关键字修饰，实现线程同步
		怎么检测一个线程是否拥有锁
		线程之间如何传递数据
		什么是CAS算法？在多线程中有哪些应用
		什么是CAS无锁机制
		什么是自旋锁
		自旋锁和互斥锁的区别
		什么是Futrue模式
		Callable与Thread区别
		你了解哪些并发框架
		如何检测死锁？
			使用Jstack命令或者Jconsole工具
		Lock底层实现原理？
		AQS是什么
		AQS应用在什么地方
		synchronized 底层实现原理

框架源码分析
	什么是Spring为什么要用
		Spring是javaweb项目的框架，主要包括SpringIOC SpringAOP
	什么是SpringIOC
	SpringIOC原理
	SpringIOC底层使用了Dom对实现application.xml配置文件进行解析，再通过java反射机制创建程序中需要使用的对象
		通过SpringIOC来对javaweb中的对象进行管理
			优点：程序解耦，降低了对象之间的依赖关系
	什么是SpringAOP
		面向切面编程。不修改被代理对象的源码上，进行功能的增强
	AOP实现原理：底层使用了Cglib动态代理和JDKProxy动态代理实现
	动态代理和静态代理区别
		代理分为静态代理和动态代理两种。
			静态代理，代理类需要自己编写代码写成。
			动态代理，代理类通过 Proxy.newInstance() 方法生成。
				不管是静态代理还是动态代理，代理与被代理者都要实现两样接口，它们的实质是面向接口编程。
			静态代理和动态代理的区别是在于要不要开发者自己定义 Proxy 类。
			动态代理通过 Proxy 动态生成 proxy class，但是它也指定了一个 InvocationHandler 的实现类。
			代理模式本质上的目的是为了增强现有代码的功能。
		代理：无需创建类的实例，通过代理类的方式即可调用类的方法
		动态代理：无需创建代理类，Proxy.newInstance() 强转成代理类 即可实现对代理类方法的调用
		静态代理：需要创建代理类
	CGLIB使用了什么技术
		java反射机制，通过字节码方式调用对象的方法
	Spring常用注解
	@autowaid @translate @requestMapping @value
	Spring框架中的单例是线程安全的么，不是
	Spring事务的分类

	Spring事务传播行为

	Spring事务实现原理

	使用Spring事务注意事项

	BeanFactory与FactoryBean区别
	Spring生命周期
	Spring作用域
		request session prototype 多例  singleton 单例
	SpringMVC执行流程
	Mybatis接口与SQL语句绑定原理
JDK集合原理
	集合框架中用到了哪些数据结构
		数组	
	Arraylist底层实现原理
		使用数组实现
	Arraylist的add方法实现原理
		首先确保能够将希望添加到集合中的元素能够添加到集合中，即确保ArrayList的容量（判断是否需要扩容）；然后将元素添加到elementData数组的指定位置；最后将集合中实际的元素个数加1。
	Arraylist的get方法实现原理
		get(int index)方法是返回指定下标处的元素的值。get函数会检查索引值是否合法（只检查是否大于size，而没有检查是否小于0）。如果所引致合法，则调用elementData(int index)方法获取值。在elementData(int index)方法中返回元素数组中指定下标的元素，并且对其进行了向下转型。
	Arraylist扩容机制原理
		底层copy一个新的数组并把大小初始化为1.5倍
	Arraylist的默认初始化大小为10
		ArrayList的优点
			ArrayList底层以数组实现，是一种随机访问模式，再加上它实现了RandomAccess接口，因此查找也就是get的时候非常快。
			ArrayList在顺序添加一个元素的时候非常方便，只是往数组里面添加了一个元素而已。
			根据下标遍历元素，效率高。
			根据下标访问元素，效率高。
			可以自动扩容，默认为每次扩容为原来的1.5倍。
		ArrayList的缺点
			插入和删除元素的效率不高。
			根据元素下标查找元素需要遍历整个元素数组，效率不高。
			线程不安全。
	Vector与ArrayList区别
		区别是底层使用的syn关键字实现的多线程同步操作
		ArrayList是最常用的List实现类，内部是通过数组实现的，它允许对元素进行快速随机访问。数组的缺点是每个元素之间不能有间隔，当数组大小不满足时需要增加存储能力，就要讲已经有数组的数据复制到新的存储空间中。当从ArrayList的中间位置插入或者删除元素时，需要对数组进行复制、移动、代价比较高。因此，它适合随机查找和遍历，不适合插入和删除。
		Vector与ArrayList一样，也是通过数组实现的，不同的是它支持线程的同步，即某一时刻只有一个线程能够写Vector，避免多线程同时写而引起的不一致性，但实现同步需要很高的花费，因此，访问它比访问ArrayList慢。
		LinkedList是用链表结构存储数据的，很适合数据的动态插入和删除，随机访问和遍历速度比较慢。另外，他还提供了List接口中没有定义的方法，专门用于操作表头和表尾元素，可以当作堆栈、队列和双向队列使用。
		vector是线程（Thread）同步（Synchronized）的，所以它也是线程安全的，而Arraylist是线程异步（ASynchronized）的，是不安全的。如果不考虑到线程的安全因素，一般用Arraylist效率比较高。
		如果集合中的元素的数目大于目前集合数组的长度时，vector增长率为目前数组长度的100%,而arraylist增长率为目前数组长度
		的50%.如过在集合中使用数据量比较大的数据，用vector有一定的优势。

		如果查找一个指定位置的数据，vector和arraylist使用的时间是相同的，都是0(1),这个时候使用vector和arraylist都可以。而
		如果移动一个指定位置的数据花费的时间为0(n-i)n为总长度，这个时候就应该考虑到使用Linkedlist,因为它移动一个指定位置的数据
		所花费的时间为0(1),而查询一个指定位置的数据时花费的时间为0(i)。
		ArrayList 和Vector是采用数组方式存储数据，此数组元素数大于实际存储的数据以便增加和插入元素，
		都允许直接序号索引元素，但是插入数据要设计到数组元素移动 等内存操作，所以索引数据快插入数据慢，
		Vector由于使用了synchronized方法（线程安全）所以性能上比ArrayList要差
		，LinkedList使用双向链表实现存储，按序号索引数据需要进行向前或向后遍历，但是插入数据时只需要记录本项的前后项即可，所以插入数度较快！

		笼统来说：LinkedList：增删改快
              		ArrayList：查询快（有索引的存在）
	LinkedList底层实现原理
		LinkedList使用双向链表实现存储，按序号索引数据需要进行向前或向后遍历，但是插入数据时只需要记录本项的前后项即可，所以插入数度较快！
	LinkedList底层add实现原理
	LinkedList底层get实现原理

	Set集合接口实现原理
	HashMap实现原理
	HashMap的put实现原理
	HashMap的get实现原理
	HashMapHash碰撞问题如何解决
	HashMap1.7与1.8的区别
	底层算法不同   1.7使用了二叉树算法 1.8使用了红黑树算法
	HashMap负载因子作用是什么
	HashMap底层扩容机制实现原理
	HashCode和equals的区别   
		HashCode对比属性的hash值是否相同
		equals值判断值是否相同
	为什么HashTable和HashMap默认大小不同


SpringBoot
	什么是SpringBoot
	为什么要使用SpringBoot
	SpringBoot启动方式
	SpringBoot与SpringMVC区别
	SpringBoot与SpringCloud区别
	SpringBoot有哪些常用注解
		Spring的注解 @restuory @service @RestController @Controller
		@Async
	@EnableAutoConfiguration作用
		实现默认自动配置程序配置信息，无需手写过多配置
	@SpringBootApplication原理

	SpringBoot热部署使用Maven插件实现
	热部署原理是什么
		操作二进制字节码实现
	热部署和热加载区别是什么
	项目中异常如何处理
		使用SpringBoot全局捕获异常，并分析具体原因
	SpringBoot如何实现异步执行
		@EnableAsync 开启异步开关
		@Async 标记需要异步执行的方法，该方法会创建线程执行
	SpringBoot多数据源拆分思路
		按照包名区分不同的数据源 ，使用拦截器拦截不同报名的请求，连接不同数据源
		使用SpringBoot注解区分不同数据源
	SpringBoot多数据源事务如何进行管理（分布式事务的一种情况）
		使用全局事务管理框架Autom来管理不同数据源的事务
	SpringBoot 如何实现打包
		mvn -package
	SpringBoot性能如何优化
		1.包扫描优化
		一般我们会使用 @SpringBootApplication 注解来自动获取应用的配置信息，但这样也会给应用带来一些副作用。使用这个注解后，会触发自动配置（ auto-configuration ）和 组件扫描 （ component scanning ），这跟使用 @Configuration、@EnableAutoConfiguration 和 @ComponentScan 三个注解的作用是一样的。这样做给开发带来方便的同时，也会有三方面的影响：
			1、会导致项目启动时间变长。当启动一个大的应用程序,或将做大量的集成测试启动应用程序时，影响会特别明显。
			2、会加载一些不需要的多余的实例（beans）。
			3、会增加 CPU 消耗。
		移除 @SpringBootApplication and @ComponentScan, 用 @EnableAutoConfiguration 来替代
				//@SpringBootApplication
				@Configuration
				@EnableAutoConfiguration
		2.运行时JVM参数优化
			JVM调优主要目的减少GC回收次数
		web容器优化
			默认情况下，Spring Boot 使用 Tomcat 来作为内嵌的 Servlet 容器,可以将 Web 服务器切换到 Undertow 来提高应用性能。
	SpringBoot2.0新特性
	SpringBoot执行流程
	SpringBoot底层实现原理
	SpringBoot装配Bean的原理

Nginx 高可用相关面试题
	什么是DNS解析域名
	有哪些外网映射工具
		花生壳、Vflok
	什么是Nginx
	Nginx作用
		反向代理隐藏域名，使服务器真实地址不暴露，更加安全
		动态资源与静态资源进行分离 ，提高网站访问速度以及更好的支持CDN加速

	什么是反向代理
		用户访问某一资源时，首先会访问nginx服务器，根据nginx配置，再进行转发到具体服务器地址
	反向代理作用
		反向代理隐藏域名，使服务器真实地址不暴露，更加安全
	Nginx如何配置反向代理
	Nginx常用相关配置	
		server 
		weight 配置负载均衡权重
		默认轮询机制
	反向代理流程
		用户首先访问
	Lvs和Nginx区别
	Location作用
		配置服务器真实地址
	Nginx如何配置负载均衡
	四层负载均衡与七层负载均衡区别
	四层负载均衡实现方案
		LVS F5
	服务器集群会产生什么问题
	什么是动态负载均衡
	Nginx如何实现动态负载均衡

Http
	什么是Http协议
		http协议是一种网络传输协议，底层使用了tcp方式进行连接，更加安全
	Http协议组成部分
	TCP和UDP区别
	谈谈7层网络模型
	Nginx如何实现TCP四层负载均衡

	Lvs和Keeplived区别
	Keeplived作用
	如何实现双机主从热备
	项目发布如何不影响正常用户访问，实现全天待机
	项目如果发生宕机如何处理 
		使用lvs+keepalived+Nginx做主从热备，lvs管理nginx集群，nginx管理服务器集群，在服务器宕机的情况下keepalived启动健康检测，多次重启无果可以短信通知运维人员及时维护。









